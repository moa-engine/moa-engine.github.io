export interface CssRecordHooksListInterface {
    'cssRecord:addProperty': PropertiesType;
    'cssRecord:cssGenerated': CssRecord;
}
export type CssRecordComponentsType = Record<string, string[]>;
export type PropertiesType = Record<string, string>;
export interface CssRecordConfigInterface {
    screenId: number;
    selector: string;
    mangledSelector: string;
    pseudoClasses: string[];
    utilityShouldBeGenerated: boolean;
    scope?: string;
}
export interface CssRecordCompileParametersConfig {
    minimize: boolean;
    mangleSelectors?: boolean;
    mangledSelectorsPrefix?: string;
}
export declare class CssRecord {
    private changed;
    private sortedPropertiesKeys;
    utilityShouldBeGenerated: boolean;
    cache: string;
    selector: string;
    mangledSelector: string;
    screenId: number;
    scope: string;
    customSelectors: string[];
    components: CssRecordComponentsType;
    properties: PropertiesType;
    pseudoClasses: string[];
    constructor(config: CssRecordConfigInterface);
    configure(config?: Partial<CssRecordConfigInterface>): void;
    addProperties(properties: Record<string, string | number>): void;
    addProperty(property: string, value: string | number): void;
    getSortedPropertiesKeys(): string[];
    addPseudoClasses(pseudoClasses: string[] | string): void;
    addCustomSelector(selector: string): void;
    addComponents(components: CssRecordComponentsType): void;
    addComponent(selector: string, selectorsChain?: string[]): void;
    generateCss(config: CssRecordCompileParametersConfig): string;
}
