/// <reference types="node" />
import type { CompilerConfigInterface, CompilerContentOptionsInterface, DefaultHooksListInterface } from '@stylify/stylify';
import { CompilationResult, Compiler } from '@stylify/stylify';
import fs from 'fs';
export interface BundleFileDataInterface {
    content: string;
}
export interface BundlerHooksListInterface extends DefaultHooksListInterface {
    'bundler:beforeInputFileRewritten': {
        bundleConfig: BundleConfigInterface;
        content: string;
        filePath: string;
    };
    'bundler:beforeCssFileCreated': {
        content: string;
        bundleConfig: BundleConfigInterface;
    };
    'bundler:bundleProcessed': {
        bundleConfig: BundleConfigInterface;
        bundleBuildCache: BundlesBuildCacheInterface;
    };
    'bundler:fileToProcessOpened': {
        bundleConfig: BundleConfigInterface;
        filePath: string;
        contentOptions: ContentOptionsInterface;
        content: string;
    };
    'bundler:initialized': {
        bundler: Bundler;
    };
}
export interface DumpVariablesIntoFileOptionsInterface {
    filePath: string;
    fileType: string;
    variablePrefix?: string;
    variableValueSeparator?: string;
    afterValue?: string;
    fileContentPrefix?: string;
    fileContentSuffix?: string;
}
export interface ContentOptionsInterface extends CompilerContentOptionsInterface {
    files: string[];
}
export interface BundlesBuildCacheInterface {
    id: string | null;
    compiler: Compiler;
    compilationResult: CompilationResult;
    buildTime: string;
    files: string[];
}
export type BundlesBuildCacheType = Record<string, BundlesBuildCacheInterface>;
export interface BundlesBuildStatsInterface {
    name: string;
    size: number;
    buildTime: string;
}
export interface BundleConfigInterface {
    outputFile: string;
    files: string | string[];
    id?: string;
    rewriteSelectorsInFiles?: boolean;
    filesBaseDir?: string;
    scope?: string;
    compiler?: CompilerConfigInterface;
    cssLayer?: string;
}
export interface CSSLayersOrderInterface {
    order: string;
    exportLayer?: string[];
    exportFile?: string;
}
export interface BundlerConfigInterface {
    id?: string;
    dev?: boolean;
    configFile?: string | string[];
    autoprefixerEnabled?: boolean;
    compiler?: CompilerConfigInterface;
    filesBaseDir?: string;
    verbose?: boolean;
    showBundlesStats?: boolean;
    watchFiles?: boolean;
    sync?: boolean;
    cssVarsExportPath?: string;
    sassVarsExportPath?: string;
    lessVarsExportPath?: string;
    stylusVarsExportPath?: string;
    bundles?: BundleConfigInterface[];
    cssLayersOrder?: CSSLayersOrderInterface;
    logsDir?: string;
}
export interface WatchedFileInterface {
    watcher: fs.FSWatcher;
    processing: boolean;
    bundlesIndexes: string[];
}
export interface GetFilesToProcessOptionsInterface {
    bundleConfig: BundleConfigInterface;
    compiler: Compiler;
    filePaths?: string[];
    fileMasks?: string[];
}
export type BundlerHooksNamesListType = keyof BundlerHooksListInterface;
export declare const hooks: any;
export declare const defineConfig: (config: BundlerConfigInterface) => BundlerConfigInterface;
export declare class Bundler {
    id: string;
    private processedBundlesQueue;
    private bundleMethodPromise;
    private isReloadingConfiguration;
    private watchedFiles;
    private configFilesWatcher;
    private configurationLoadingPromise;
    private configFiles;
    private rawConfigurations;
    private configFilesWatcherInitialized;
    private dev;
    private filesBaseDir;
    private verbose;
    private showBundlesStats;
    private sync;
    private watchFiles;
    private cssVarsExportPath;
    private sassVarsExportPath;
    private lessVarsExportPath;
    private stylusVarsExportPath;
    private bundles;
    private autoprefixerEnabled;
    private createdFilesContentCache;
    private cssLayersOrder;
    private logsDir;
    private logsDirInitialized;
    /**
     * @internal
     */
    compilerConfig: CompilerConfigInterface;
    bundlesBuildCache: BundlesBuildCacheType;
    private bundlesInitialized;
    constructor(config: BundlerConfigInterface);
    private mergeConfigs;
    private loadConfigFile;
    configure(config: BundlerConfigInterface, fromConfigFile?: string): Promise<void>;
    private dumpCssLayersOrderIntoFile;
    private dumpVariablesIntoFile;
    waitOnBundlesProcessed(): Promise<void>;
    findBundleCache(id: string): BundlesBuildCacheInterface | null;
    private addBundles;
    bundle(bundles?: BundleConfigInterface[]): Promise<void>;
    stop(options?: {
        watchedFile?: WatchedFileInterface;
        stopConfigFileWatchers?: boolean;
    }): void;
    restart(stopConfigFileWatchers?: boolean): Promise<void>;
    private logInfoAboutWatchingConfigFiles;
    private startWatchingConfigFiles;
    private processBundle;
    private getFilesToProcess;
    private writeFile;
    private checkIfFileExists;
    private clearFilePaths;
    private log;
}
